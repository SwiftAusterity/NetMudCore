@model NetMudCore.Models.Admin.AddViewNotificationViewModel

@{
    ViewBag.Breadcrumbs = new Tuple<string, string[], string[]>("Send Notification", new string[] { "Dashboard", "Mailbox" }, new string[] { "/Manage", "/Manage/Notifications" });
}

@if (Model.DataObject == null)
{
    <section id="newNotificationForm">
        @using (Html.BeginForm("AddViewNotification", "Manage", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group row">
                @Html.EditorFor(m => m.RecipientAccount)
                @Html.EditorFor(m => m.Recipient)
            </div>
            <div class="form-group row">
                @Html.EditorFor(m => m.Subject)
            </div>
            <div class="form-group row">
                @Html.EditorFor(m => m.Body)
            </div>

            @Html.Partial("SubmitButton", new NetMudCore.Models.SubmitButtonModel() { SubmitName = "Send", CancelName = "Cancel", ReturnAction = "Notifications", ReturnController = "Manage", IncludeCancel = true })
        }
    </section>
}
else
{
    <section id="newNotificationForm">
        @using (Html.BeginForm("MarkAsReadNotification", "Manage", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group row">
                @Html.EditorFor(m => m.RecipientAccount, new { disabled = true })
                @Html.EditorFor(m => m.Recipient, new { disabled = true })
            </div>
            <div class="form-group row">
                @Html.EditorFor(m => m.Subject, new { disabled = true })
            </div>
            <div class="form-group row">
                @Html.EditorFor(m => m.Body, new { disabled = true })
            </div>

            @Html.Partial("SubmitButton", new NetMudCore.Models.SubmitButtonModel() { SubmitName = "Mark As Read", CancelName = "Cancel", ReturnAction = "Notifications", ReturnController = "Manage", IncludeCancel = true })
        }
    </section>

}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $("#RecipientAccount").autocomplete({
            source: "/api/ClientDataApi/GetAccountNames",
            minLength: 3,
            select: function (event, ui) {
                $(this).val(ui.item.value);

                $("#Recipient").autocomplete({
                    source: "/api/ClientDataApi/GetCharacterNamesForAccount/" + ui.item.value,
                    minLength: 3,
                    select: function (event, ui) {
                        $(this).val(ui.item.value);
                        return false;
                    }
                });

                return false;
            }
        });
    </script>
}
