@model NetMudCore.Models.IPagedDataModel
@{
    var prevPageState = Model.CurrentPageNumber > 1 ? "pager" : "pager disabled";
    var nextPageState = Model.CurrentPageNumber < Model.NumberOfPages ? "pager" : "pager disabled";
}
<div>
    @using (Html.BeginForm("Index", Model.ModelEntityType, FormMethod.Post, new { id = "paginationForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.EditorFor(m => m.SearchTerms, new { forceOptional = true, htmlAttributes = new Dictionary<string, object>() { { "onchange", "paginationForm.submit();" }, { "name", "SearchTerms" }, { "id", "SearchTerms" } } })
        @Html.EditorFor(m => m.ItemsPerPage, new { forceOptional = true, htmlAttributes = new Dictionary<string, object>() { { "onchange", "paginationForm.submit();" }, { "name", "ItemsPerPage" }, { "id", "ItemsPerPage" } } })
        <div class="listPagination">
            <div class="@prevPageState">
                <button class="pagingArrow" aria-label="Previous" value="@(Model.CurrentPageNumber - 1)" title="Previous" name="CurrentPageNumber"><span aria-hidden="true">&laquo;</span></button>
            </div>
            @for (var i = 1; i <= Model.NumberOfPages; i++)
            {
                if (Model.NumberOfPages > 5
                && i != 1
                && i != Model.NumberOfPages
                && i != Model.CurrentPageNumber)
                {
                    continue;
                }

                <div>
                    <button value="@i" title="@i" name="CurrentPageNumber">@i.ToString()</button>
                </div>
            }
            <div class="@nextPageState">
                <button class="pagingArrow" aria-label="Next" value="@(Model.CurrentPageNumber + 1)" title="Next" name="CurrentPageNumber"><span aria-hidden="true">&raquo;</span></button>
            </div>
        </div>
    }
</div>