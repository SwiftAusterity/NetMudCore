@model NetMudCore.Models.GameContextModel

<div id="OutputArea" class="parserOutput"></div>
<div class="inputContainer">
    <input type="text" id="input" name="input" class="parserInput" />
</div>
<audio id="backgroundMusic" name="backgroundMusic" volume="0.5"></audio>
<audio id="soundEffects" name="soundEffects" volume="0.5"></audio>

@section scripts {
    @Scripts.Render("~/Scripts/ClientHelpers.js")
    @Scripts.Render("~/Scripts/WebSocketsClient.js")

    <script type="text/javascript">
        window.connection;
        window.soundMuted = '@Model.AuthedUser.GameAccount.Config.SoundMuted' === 'True';
        window.musicMuted = '@Model.AuthedUser.GameAccount.Config.MusicMuted' === 'True';
        window.soundVolume = 5
        window.musicVolume = 5;
        window.tutorialMode = '@Model.AuthedUser.GameAccount.Config.UITutorialMode' === 'True';
        window.gossipMode = '@Model.AuthedUser.GameAccount.Config.GossipSubscriber' === 'True';
        window.loopTrack = false;
        window.currentPlaylist = 0;
        window.currentPlaylistTrack = 0;
        window.currentTrack = 0;
        window.tooltips = [];
        window.stopToggle = false;
        window.selectedInventoryItem = -1;
        window.clientCommands = {};

        window.commandArray = ['look'];
        window.commandPointer = 0;
        window.lastOutput = '';

        window.playlists = [
            @foreach(var playlist in Model.MusicPlaylists)
            {
                @Html.Raw(string.Format("{{ \"name\" : \"{0}\", songs : [ {1} ]}}", playlist.Name, string.Join(",", playlist.Songs.Select(song => "'" + song + "'"))))
            }
        ];

    $(document).ready(function () {
        submitCharacter();

        setVolume();

        bindClientCommand('commands', function () {
            var commandsList = '';

            for (var key in window.clientCommands) {
                commandsList = commandsList + key + ' ';
            }

            AppendTextToOutput(commandsList);
        });

        bindClientCommand('music', function (args) {
            var arguments = args.split(' ');

            if (arguments.length == 0 || arguments[0] === '') {
                AppendTextToOutput("Syntax: /music [mute|loop]");
                AppendTextToOutput("Syntax: /music [v|vol|volume] #");
                return;
            }

            if (arguments[0] !== undefined) {
                switch (arguments[0]) {
                    case 'mute':
                        window.musicMuted = !musicMuted;

                        $.post('/api/ClientDataApi/ToggleMusicMute');

                        setVolume();

                        if (window.musicMuted) {
                            AppendTextToOutput("Music mute ON.");
                            $('#backgroundMusic')[0].pause();
                        }
                        else {
                            AppendTextToOutput("Music mute OFF.");
                            $('#backgroundMusic')[0].play();
                        }
                        break;
                    case 'loop':
                        changeLoopTrackMode($('#loopTracks')[0]);
                        break;
                    case 'v':
                    case 'vol':
                    case 'volume':
                        if (arguments[1] !== undefined) {
                            var volume = parseInt(arguments[1]);
                            window.musicVolume = volume;
                            setVolume();
                            AppendTextToOutput("Music volume set to " + volume);
                        } else {
                            AppendTextToOutput("Syntax: /music [v|vol|volume] #");
                        }
                        break;
                    default:
                        AppendTextToOutput("Syntax: /music [mute|loop]");
                        AppendTextToOutput("Syntax: /music [v|vol|volume] #");
                        break;
                }

                return;
            }

            AppendTextToOutput("Syntax: /music [mute|loop]");
            AppendTextToOutput("Syntax: /music [v|vol|volume] #");
        });

        bindClientCommand('sound', function (args) {
            var arguments = args.split(' ');

            if (arguments.length == 0) {
                AppendTextToOutput("Syntax: /sound [mute]");
                AppendTextToOutput("Syntax: /sound [v|vol|volume] #");
                return;
            }

            if (arguments[0] !== undefined || arguments[0] === '') {
                switch (arguments[0]) {
                    case 'mute':
                        window.soundMuted = !window.soundMuted;

                        $.post('/api/ClientDataApi/ToggleSoundMute');

                        setVolume();

                        if (window.soundMuted) {
                            AppendTextToOutput("Sound mute ON.");
                        }
                        else {
                            AppendTextToOutput("Sound mute OFF.");
                        }
                        break;
                    case 'v':
                    case 'vol':
                    case 'volume':
                        if (arguments[1] !== undefined) {
                            var volume = parseInt(arguments[1]);
                            window.soundVolume = volume;
                            setVolume();
                            AppendTextToOutput("Sound volume set to " + volume);
                        } else {
                            AppendTextToOutput("Syntax: /sound [v|vol|volume] #");
                        }
                        break;
                      default:
                        AppendTextToOutput("Syntax: /music [mute|loop]");
                        AppendTextToOutput("Syntax: /music [v|vol|volume] #");
                        break;
              }

                return;
            }

            AppendTextToOutput("Syntax: /sound [mute]");
            AppendTextToOutput("Syntax: /sound [v|vol|volume] #");
        });

        if ($('.audioTrackSelector') !== undefined && $('.audioTrackSelector').length > 0) {
            changeTrack($('.audioTrackSelector')[0]);
        }

        Tutorial($('.inputContainer'), "This is where you type commands. The UP and DOWN arrow keys will cycle through prior input. Hit ENTER to submit commands.", window.tutorialMode);
        Tutorial($('#userControls'), "Music tracks (and muting controls) in addition to disconnect/reconnect can be found here.", window.tutorialMode);
        Tutorial($('#locationBreadcrumbs'), "This is where you are in the ROOM.", window.tutorialMode);

        $('#disconnect').click(function (e) {
            $('#input').val('');
            $("#OutputArea").html('');
            $("#OutputArea")[0].scrollTop = $("#OutputArea")[0].scrollHeight;

            AppendTextToOutput('Connection TERMINATED.');
            window.connection.close();

            WipeUI();

            $('disconnect').off('click');
            return false;
        });

        $('#disconnect').click(function (e) {
            $('#input').val('');
            $("#parserClientOutput").html('');
            $("#parserClientOutput")[0].scrollTop = $("#parserClientOutput")[0].scrollHeight;

            AppendTextToOutput('Connection TERMINATED.');
            window.connection.close();

            $('disconnect').off('click');
            return false;
        });

        //bind the change event of the currently selected character dropdown to call the ajax thingy to set the player's character
        $('#currentCharacter').change(function () {
            submitCharacter();
        });

        $("#clientReload").click(function (e) {
            ReloadUI();
            return false;
        });

        $("#keyMap").click(function (e) {
            $('.keyLegend').toggleClass('expanded');
            return false;
        });

        $('#loopTracks').click(function () {
            changeLoopTrackMode(this);
            return false;
        });


        $("#muteSounds").click(function (e) {
            window.soundMuted = !soundMuted;

            $.post('/api/ClientDataApi/ToggleSoundMute');

            setVolume();

            return false;
        });

        $("#muteMusic").click(function (e) {
            window.musicMuted = !musicMuted;

            $.post('/api/ClientDataApi/ToggleMusicMute');

            setVolume();

            if (window.musicMuted) {
                $('#backgroundMusic')[0].pause();
            }
            else {
                $('#backgroundMusic')[0].play();
            }

            return false;
        });

        $("a.volumePip").click(function (e) {
            var volumeNumber = parseInt($(this).attr("data-level"));
            var type = $(this).attr("data-type");

            if (type === 'sound') {
                window.soundVolume = volumeNumber;
            } else {
                window.musicVolume = volumeNumber;
            }

            setVolume();
            return false;
        });

        TestBrowser();
    });

    function setVolume() {
        var $sound = $('#soundEffects');
        var $music = $('#backgroundMusic');


        if (window.soundMuted) {
            $sound.attr('volume', 0);
            $("#muteSounds").children().attr('class', 'glyphicon glyphicon-volume-off');
            $("#muteSounds").children().attr('style', 'color: red;');
        }
        else {
            $sound.attr('volume', '0.' + window.soundVolume);
            $("#muteSounds").children().attr('class', 'glyphicon glyphicon-volume-up');
            $("#muteSounds").children().attr('style', 'color: green;');
        }

        var $soundPip = $("a.volumePip[data-level='" + window.soundVolume + "'][data-type='sound']");
        var soundStyle = 'color: green; float: right; cursor: pointer;';

        if (window.soundVolume < 4) {
            soundStyle = 'color: red; float: right; cursor: pointer;';
        } else if (window.soundVolume < 7) {
            soundStyle = 'color: orange; float: right; cursor: pointer;';
        }

        $soundPip.parent().attr("style", soundStyle);

        $soundPip.html('=');
        $soundPip.prevAll().html('=');
        $soundPip.nextAll().html('-');

        if (window.musicMuted) {
            $music.attr('volume', 0);
            $("#muteMusic").children().attr('class', 'glyphicon glyphicon-volume-off');
            $("#muteMusic").children().attr('style', 'color: red;');
        }
        else {
            $music.attr('volume', '0.' + window.musicVolume);
            $("#muteMusic").children().attr('class', 'glyphicon glyphicon-volume-up');
            $("#muteMusic").children().attr('style', 'color: green;');
        }

        var $musicPip = $("a.volumePip[data-level='" + window.musicVolume + "'][data-type='music']");
        var musicStyle = 'color: green; float: right; cursor: pointer;';

        if (window.musicVolume < 4) {
            musicStyle = 'color: red; float: right; cursor: pointer;';
        } else if (window.musicVolume < 7) {
            musicStyle = 'color: orange; float: right; cursor: pointer;';
        }

        $musicPip.parent().attr("style", musicStyle);

        $musicPip.html('=');
        $musicPip.prevAll().html('=');
        $musicPip.nextAll().html('-');
    }
    </script>
}
