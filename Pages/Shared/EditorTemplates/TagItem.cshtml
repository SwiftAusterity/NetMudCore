@model string
@{
    bool disabled = ViewData["disabled"] != null;
    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var htmlAttributes = new Dictionary<string, object>() { { "id", ViewData.ModelMetadata.PropertyName }, { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };
    var forceOptional = ViewData["forceOptional"] != null;
    var forceBlankValue = Model == null || Model.GetType().IsArray ? true : false;
    var value = Model;
    var strippedNaked = ViewData["strippedNaked"] != null;

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("readonly", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;

        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                if (htmlAttributes.Any(att => att.Key == kvp.Key))
                {
                    htmlAttributes[kvp.Key] = kvp.Value;
                }
                else
                {
                    htmlAttributes.Add(kvp.Key, kvp.Value);
                }
            }
        }
    }

    if (forceBlankValue && !htmlAttributes.ContainsKey("Value"))
    {
        htmlAttributes.Add("Value", "");
        value = "";
    }
}
@if (strippedNaked)
{
    @Html.TextBox("", value, htmlAttributes)
}
else
{
    <div class="accordionWrapper">
        <h5>@Model</h5>
        <div>
            <div class="form-group row">
                <a href="#" class="removeRow col-form-label" title="Remove this" onclick="javascript: $(this).parent().parent().parent().remove(); return false;">X</a>
                <div>
                    @Html.TextBox("", value, htmlAttributes)
                </div>
            </div>
        </div>
    </div>
}
