@using NetMudCore.Data.Inanimate
@using NetMudCore.DataStructure.Inanimate
@model InanimateComponent
@{
    bool disabled = ViewData["disabled"] != null;
    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var forceOptional = ViewData["forceOptional"] != null;
    var forceBlankValue = Model == null || Model.GetType().IsArray ? true : false;
    var ghostNameClass = "ghostNameTip";
    var strippedNaked = ViewData["strippedNaked"] != null;
    var archivedValue = ViewData["archivedValue"] == null ? "" : ViewData["archivedValue"].ToString();

    if (ViewData.ModelMetadata.IsRequired && !forceOptional)
    {
        ghostNameClass += " ghostRequired";
    }

    var htmlAttributes = new Dictionary<string, object>() { { "id", ViewData.ModelMetadata.PropertyName }, { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("readonly", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;

        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                if (htmlAttributes.Any(att => att.Key == kvp.Key))
                {
                    htmlAttributes[kvp.Key] = kvp.Value;
                }
                else
                {
                    htmlAttributes.Add(kvp.Key, kvp.Value);
                }
            }
        }
    }

    if (forceBlankValue && !htmlAttributes.ContainsKey("Value"))
    {
        htmlAttributes.Add("Value", "");
    }

    ViewData.Add("strippedNaked", "true");

    var itemList = ((IEnumerable<IInanimateTemplate>)ViewData["validItems"]).Select(item => new SelectListItem() { Text = item.Name, Value = item.Id.ToString(), Selected = Model != null && Model.Item != null && item.Id == Model.Item.Id });
}
@if (strippedNaked)
{
    @Html.DescriptionFor(m => m)
    <div style="display: inline-flex;">
        @Html.EditorFor(m => m.Amount, htmlAttributes)<span class="multiBoxUnit">of</span>@Html.EditorFor(m => m.Item, htmlAttributes)
    </div>
}
else
{
    <div class="multiBox multiBox-2">
        <span class="@ghostNameClass">@ViewData.ModelMetadata.DisplayName</span>
        @Html.DescriptionFor(m => m)
        <div>
            @Html.EditorFor(m => m.Amount, htmlAttributes)<span class="multiBoxUnit">of</span>@Html.EditorFor(m => m.Item, htmlAttributes)
        </div>

        @if (!string.IsNullOrWhiteSpace(archivedValue))
        {
            <span class="archive">Archived Value: <span>@archivedValue</span></span>
        }

    </div>
}