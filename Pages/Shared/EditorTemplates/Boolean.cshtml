@model object
@{
    bool disabled = ViewData["disabled"] != null;
    var cssClass = ViewData["cssClass"] == null ? "form-control" : ViewData["cssClass"];
    var htmlAttributes = new Dictionary<string, object>() { { "id", ViewData.ModelMetadata.PropertyName }, { "class", cssClass }, { "placeholder", ViewData.ModelMetadata.DisplayName }, { "title", ViewData.ModelMetadata.DisplayName } };
    var forceOptional = ViewData["forceOptional"] != null;
    var modelName = ViewData.ModelMetadata.PropertyName;
    var noValidation = ViewData["noValidation"] != null;
    var modelValue = Model == null || Model.GetType() != typeof(bool) ? false : (bool)Model;
    var archivedValue = ViewData["archivedValue"] == null ? "" : ViewData["archivedValue"].ToString();
    var strippedNaked = ViewData["strippedNaked"] != null;

    if (ViewData["forceChecked"] != null)
    {
        modelValue = (bool)ViewData["forceChecked"];
    }

    if (ViewData["disabled"] != null)
    {
        htmlAttributes.Add("readonly", true);
    }

    if (ViewData["htmlAttributes"] != null)
    {
        var additionalAttribs = ViewData["htmlAttributes"] as IDictionary<string, object>;
        if (additionalAttribs != null)
        {
            foreach (var kvp in additionalAttribs)
            {
                if (htmlAttributes.Any(att => att.Key == kvp.Key))
                {
                    htmlAttributes[kvp.Key] = kvp.Value;
                }
                else
                {
                    htmlAttributes.Add(kvp.Key, kvp.Value);
                }
            }
        }
    }
}
@if (strippedNaked)
{
    @Html.DescriptionFor(m => m)
    <div class="pretty p-switch p-fill">
        @Html.CheckBox("", modelValue, htmlAttributes)
        <div class="state">
            @Html.LabelFor(m => m, new { @class = "col-form-label" })
        </div>
    </div>
}
else
{
    <div>
        @Html.DescriptionFor(m => m)
        <div class="pretty p-switch p-fill" style="width: 100%;">
            @Html.CheckBox("", modelValue, htmlAttributes)
            <div class="state">
                @Html.LabelFor(m => m, new { @class = "col-form-label" })
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(archivedValue))
        {
            <span class="archive">Archived Value: <span>@archivedValue</span></span>
        }
        @if (!noValidation)
        {
            @Html.ValidationMessageFor(m => m, "", new { @class = "text-danger" })
        }
    </div>
}